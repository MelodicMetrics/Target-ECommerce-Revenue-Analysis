I"<h1>Steps to Create <code>Orders_Final</code></h1>

<h2>Step 1: Initial <code>Orders_Final</code> Table Creation</h2>
<p>
  To accurately identify which orders were missing or discrepant, I needed tables that displayed <code>order_id</code>s based on the <code>Customers_Final</code> table created earlier.
</p>

<details class="section-details">
  <summary>ðŸ“‚<b><i>Query to Create Initial Orders_Final</i></b></summary>
  <pre><code class="language-sql">
CREATE OR REPLACE TABLE `iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Orders_Final` AS 
SELECT 
    orders.order_id,
    orders.customer_id,
    orders.order_status,
    orders.order_purchase_timestamp,
FROM 
    `iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Orders` AS orders
JOIN 
    `iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Customers_Final` AS cust
ON 
    orders.customer_id = cust.customer_id
  </code></pre>
</details>

<p>
  - <em>This table just created is the one referenced in 
  <a href="../README.md">Overview README.md</a> for creating <code>Recalculated_Missing_Orders</code> and <code>Recalculated_Discrepant_Orders</code>. After creating those two tables, I referenced them in the following query in Step 2.</em>
</p>

<div class="hr-wrapper">
  <hr class="title" />
</div>

<h2>Step 2: Filtered <code>Orders_Final</code> Table with Missing and Discrepant Order IDs Removed</h2>
<p>
  After identifying the discrepant and missing <code>order_id</code>s, I applied the necessary filter logic to create a complete, consistent <code>Orders_Final</code> table:
</p>

<details class="section-details">
  <summary>ðŸ“‚<b><i>Query to Create Filtered Orders_Final</i></b></summary>
  <pre><code class="language-sql">
/* 
  This query was to create a new Orders_Final born of two issues found during initial cleaning and analysis.
    1. There are order_ids in the orders table that do not appear in the Order Items table. Those order_ids
       are marked in the Missing_Orders table.
    2. There are order_ids where the calculated revenue from price and freight do not match the total payment value
       These ids are marked in the Discrepant_Orders and Recalculated_Discrepant_orders tables. The first holds the order_ids 
       based on the initial analysis of 4 states rather than the current. The recalculated considers these new ids. 
*/

CREATE OR REPLACE TABLE `iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Orders_Final` AS
SELECT
orders.order_id,
orders.customer_id,
orders.order_status,
orders.order_purchase_timestamp,
FROM
`iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Orders` AS orders
JOIN
`iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Customers_Final` AS cust
ON
orders.customer_id = cust.customer_id
WHERE
orders.order_id NOT IN (
SELECT
order_id
FROM
iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Recalculated_Missing_Orders
)
AND
orders.order_id NOT IN (
SELECT
order_id
FROM
iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Recalculated_Discrepant_Orders
)
</code></pre>

</details>

<p>
  This approach ensured that <code>Orders_Final</code> was clean and aligned with both <code>Order_Items_Final</code> and <code>Payments_Final</code>, eliminating any <code>order_id</code>s that were missing or had revenue discrepancies.
</p>
:ET
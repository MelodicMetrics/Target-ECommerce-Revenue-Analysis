I"<h1>Orders_Final, Order_Items_Final, and Payments_Final Overview</h1>

<h2>Overviews of Table Changes</h2>
<p>
  <strong>To see an overview of changes made to each table, click the respective link below:</strong>
</p>
<ul>
  <li><a href="/data-cleaning-part-two/Orders-Order_Items-Payments/Orders_Final/"><b>Orders_Final</b></a></li>
  <li><a href="/data-cleaning-part-two/Orders-Order_Items-Payments/Order_Items_Final/"><b>Order_Items_Final</b></a></li>
  <li><a href="/data-cleaning-part-two/Orders-Order_Items-Payments/Payments_Final/"><b>Payments_Final</b></a></li>
</ul>

<hr class="title" />

<h2>Introduction</h2>
<p>
  The <code>Orders_Final</code>, <code>Order_Items_Final</code>, and <code>Payments_Final</code> tables are connected
  through shared <code>order_id</code>s. The <code>Order_Items_Final</code> table contains <code>price</code> and
  <code>freight_value</code> columns, which together should equal the <code>total_payment_value</code> in
  <code>Payments_Final</code>. In the initial phase of analysis, I discovered discrepancies in these calculations and
  removed them to maintain data accuracy.
</p>

<p>
  Significant improvements have been made to the dataset, including an increased number of validated
  <code>customer_id</code>s and verified location data. I recalculated the discrepancy function to ensure that all
  identified issues were addressed accurately. Additionally, I removed the <code>payment_type</code> and
  <code>payment_installments</code> columns from <code>Payments_Final</code>, which had been causing duplicate
  <code>order_id</code>s and were likely a primary source of the original discrepancies.
</p>

<p>
  These recalculations resulted in newly created <code>Recalculated_Missing_Orders</code> and
  <code>Recalculated_Discrepant_Orders</code> tables, which now accurately reflect missing and discrepant
  <code>order_id</code>s. This ensures consistent calculations of total revenue and profitability across product
  categories, seller regions, and customer demographics.
</p>

<hr />

<h2>Recalculated_Discrepant_Orders Table</h2>
<p>
  To generate an updated list of <code>order_id</code>s with discrepancies between expected total payment values and
  calculated total order values, I created two temporary tables and joined them. Using
  <code>ROUND(SUM(...), 2)</code> alone would have helped remove some small discrepancies, but others still would have
  appeared due to precision limitations. Including
  <code>AND ABS(c.calculated_order_value - p.total_payment_value) &gt;= 0.01</code> ensured that only
  <code>order_id</code>s with discrepancies of at least a penny were flagged, accounting for the precision limitations
  of the <code>ROUND</code> function.
</p>

<details class="section-details">
  <summary>ðŸ“‚ <b><i>Expand to View Details on the Creation of Recalculated_Discrepant_Orders</i></b></summary>
  <pre><code class="language-sql">
<!-- prettier-ignore -->
CREATE OR REPlACE TABLE iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Recalculated_Discrepant_Orders AS (
    WITH Calculated_Order_Values AS (
        SELECT 
            order_id,
            ROUND(SUM(price + freight_value), 2) AS calculated_order_value
        FROM 
            iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Order_Items_Final
        GROUP BY 
            order_id
    ),
    Payments_Total AS (
        SELECT 
            order_id,
            ROUND(SUM(total_payment_value), 3) AS total_payment_value
        FROM 
            iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Payments_Final
        GROUP BY 
            order_id
    )
    SELECT 
        c.order_id,
        c.calculated_order_value,
        p.total_payment_value,
        c.calculated_order_value - p.total_payment_value AS discrepancy
    FROM 
        Calculated_Order_Values AS c
    INNER JOIN 
        Payments_Total AS p
    ON 
        c.order_id = p.order_id
    WHERE 
        c.calculated_order_value != p.total_payment_value
        AND ABS(c.calculated_order_value - p.total_payment_value) &gt;= 0.01
);
  </code></pre>
</details>

<p>This query yielded <b>351 order_id</b>s.</p>

<hr />

<h2>Recalculated_Missing_Orders Table</h2>
<p>
  In addition to these discrepant <code>order_id</code>s, several were present in <code>Orders</code> but not in
  <code>Order Items</code>. This would have created discrepancies in analysis between <code>Orders_Final</code> and
  <code>Order_Items_Final</code>. During initial data cleaning, I identified these missing <code>order_id</code>s,
  primarily associated with statuses like "unavailable" or "canceled."
</p>

<p>
  After recalculating missing orders, I filtered <code>Orders_Final</code> and <code>Order_Items_Final</code> to
  maintain consistency. The updated list ensured that discrepancies were minimized.
</p>

<details class="section-details">
  <summary>ðŸ“‚ <b><i>Expand to View Details on the Creation of Recalculated_Missing_Orders</i></b></summary>
  <pre><code class="language-sql">
<!-- prettier-ignore -->
CREATE TABLE 
  iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Recalculated_Missing_Orders AS
SELECT 
  o.order_id, o.order_status
FROM 
  iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Orders_Final o
LEFT JOIN 
  iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Order_Items_Final oi 
ON 
  o.order_id = oi.order_id
WHERE 
  oi.order_id IS NULL;
  </code></pre>
</details>

<p>The recalculated missing orders table resolved <b>733 total missing order_id</b>s.</p>

<hr />

<h2>Conclusion</h2>
<p>
  By recalculating missing and discrepant <code>order_id</code>s, I improved consistency across the final tables. Key
  steps included:
</p>
<ul>
  <li>Ensuring valid <code>order_id</code>s were retained.</li>
  <li>Removing discrepancies in revenue calculations.</li>
  <li>Maintaining alignment between <code>Orders_Final</code>, <code>Order_Items_Final</code>, and
    <code>Payments_Final</code>.
  </li>
</ul>
<p>
  These steps provide a solid foundation for accurate revenue and profitability analysis, ensuring reliable results for
  downstream reporting.
</p>
:ET
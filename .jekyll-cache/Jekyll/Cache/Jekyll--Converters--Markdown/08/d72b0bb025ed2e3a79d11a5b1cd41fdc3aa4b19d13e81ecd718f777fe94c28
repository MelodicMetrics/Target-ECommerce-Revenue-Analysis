I"c<h1>Product Measures Overview</h1>
<p>This document holds all the various product measures used in my EDA dashboards.</p>

<div class="hr-wrapper">
  <hr class="title" />
</div>

<h2>Product Measures</h2>

<details class="section-details">
  <summary><b>1. Product Count</b></summary>
  <p>
    <strong>Description:</strong> Calculates the total count of products in the <code>Order_Items_Final</code> table. 
    If the count of product IDs is blank (e.g., no products are found), it returns <code>0</code>. Otherwise, it uses 
    <code>COUNTROWS</code> to compute the total number of rows in the table, representing the product count.
  </p>
  <details class="code-details">
    <summary>ðŸ“‚ <b>DAX Measure</b></summary>
    <pre><code class="language-dax">
<!-- prettier ignore -->
Product Count =
    IF(
        ISBLANK(COUNT('Order_Items_Final'[product_id])),
        0,
        COUNTROWS('Order_Items_Final')
    )
    </code></pre>
  </details>
</details>

<div class="hr-wrapper">
  <hr />
</div>

<h2>Product Percentages</h2>

<details class="section-details">
  <summary><b>1. Product Count Percentage</b></summary>
  <p>
    <strong>Description:</strong> Computes the percentage of products in the <code>Order_Items_Final</code> table 
    relative to the total product count across all data. If the denominator is <code>0</code>, the calculation 
    safely defaults to <code>0</code> to prevent errors.
  </p>
  <details class="code-details">
    <summary>ðŸ“‚ <b>DAX Measure</b></summary>
    <pre><code class="language-dax">
<!-- prettier ignore -->
Product Count (%) =
DIVIDE(
    [Product Count],
    CALCULATE(
        [Product Count],
        ALL('Order_Items_Final')
    ),
    0
)
    </code></pre>
  </details>
</details>

<div class="hr-wrapper">
  <hr />
</div>

<details class="section-details">
  <summary><b>2. Product Count Percentage per Category</b></summary>
  <p>
    <strong>Description:</strong> Calculates the percentage of products within a specific category in the 
    <code>Order_Items_Final</code> table. The calculation filters the product count by the current 
    <code>Product Category</code> context and compares it to the total product count in the table.
  </p>
  <details class="code-details">
    <summary>ðŸ“‚ <b>DAX Measure</b></summary>
    <pre><code class="language-dax">
<!-- prettier ignore -->
Product Count (%) per Category =
DIVIDE(
    [Product Count],
    CALCULATE(
       [Product Count],
        REMOVEFILTERS('Order_Items_Final'),
        VALUES('Order_Items_Final'[Product Category])
    ),
    0
)
    </code></pre>
  </details>
</details>

<div class="hr-wrapper">
  <hr />
</div>

<h2>Calculated Columns</h2>

<details class="section-details">
  <summary><b>1. Product Quantity</b></summary>
  <p>
    <strong>Description:</strong> Determines the number of items sold for each product in the 
    <code>Order_Items_Final</code> table. This calculated column is essential for weighted revenue calculations, 
    ensuring that products are accurately represented based on their sales volume.
  </p>
  <details class="code-details">
    <summary>ðŸ“‚ <b>DAX Measure</b></summary>
    <pre><code class="language-dax">
<!-- prettier ignore -->
product_quantity =
CALCULATE(
    COUNT('Order_Items_Final'[order_id]),
    FILTER(
        'Order_Items_Final',
        'Order_Items_Final'[product_id] = EARLIER('Order_Items_Final'[product_id])
    )
)
    </code></pre>
  </details>
</details>

<div class="hr-wrapper">
  <hr />
</div>

<h2>Category Rankings</h2>
<p>This calculated table ranks product categories by their total revenue. It serves the following purposes:</p>
<ul>
  <li><b>Easier Sorting:</b> Provides a default ranking of product categories based on their revenue, making it simpler to sort categories in visualizations.</li>
  <li><b>Improved Visualization Logic:</b> Ensures that visualizations, which might otherwise default to alphabetical sorting by product category, are sorted by revenue instead.</li>
  <li><b>Slicer Integration:</b> Supports slicers such as "Top 21 Categories" by ensuring they are default-sorted according to the revenue-based ranking.</li>
  <li><b>Streamlined Reporting:</b> Allows for consistent sorting logic across all analyses and dashboards, reducing the need for additional sorting measures.</li>
</ul>

<details class="section-details">
  <summary><b>1. Table DAX Query</b></summary>
  <p>
    <strong>Description:</strong> Creates a calculated table that adds a <code>Total Revenue</code> column and a 
    <code>Revenue Rank</code> for each unique product category. The rank is based on descending total revenue, ensuring 
    that higher-revenue categories are prioritized in visualizations and reports.
  </p>
  <details class="code-details">
    <summary>ðŸ“‚ <b>DAX Measure</b></summary>
    <pre><code class="language-dax">
<!-- prettier ignore -->
Category Rankings =
ADDCOLUMNS(
    DISTINCT('Products_Final'[product_category]),
    "Total Revenue",
        [Total Product Revenue],
    "Revenue Rank",
        RANKX(
            ALL('Products_Final'[product_category]),
            [Total Product Revenue],
            ,
            DESC
        )
)
    </code></pre>
  </details>
</details>
:ET
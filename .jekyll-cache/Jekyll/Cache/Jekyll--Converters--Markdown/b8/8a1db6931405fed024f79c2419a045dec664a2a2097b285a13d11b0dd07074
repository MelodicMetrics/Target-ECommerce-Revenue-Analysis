I"L*<h1>Orders_Final, Order_Items_Final, and Payments_Final Overview</h1>

<h2>Overviews of Table Changes</h2>
<p><strong>To see an overview of changes made to each table, click the respective link below:</strong></p>
<ul>
  <li><a href="/data-cleaning-part-two/Orders-Order_Items-Payments/Orders_Final/"><b>Orders_Final</b></a></li>
  <li><a href="/data-cleaning-part-two/Orders-Order_Items-Payments/Order_Items_Final/"><b>Order_Items_Final</b></a></li>
  <li><a href="/data-cleaning-part-two/Orders-Order_Items-Payments/Payments_Final/"><b>Payments_Final</b></a></li>
</ul>

<hr class="title" />

<p>
  The <code>Orders_Final</code>, <code>Order_Items_Final</code>, and <code>Payments_Final</code> tables are connected
  through shared <code>order_id</code>s. The <code>Order_Items_Final</code> table contains <code>price</code> and
  <code>freight_value</code> columns, which together should equal the <code>total_payment_value</code> in
  <code>Payments_Final</code>. In the initial phase of analysis, I discovered discrepancies in these calculations and
  removed them to maintain data accuracy.
</p>

<p>
  Since then, the dataset has undergone significant improvements, with an increased number of validated
  <code>customer_id</code>s and verified location data. As a result, I recalculated the discrepancy function to ensure
  all identified issues were accurately addressed. Additionally, I removed the <code>payment_type</code> and
  <code>payment_installments</code> columns from <code>Payments_Final</code>, which had been causing duplicate
  <code>order_id</code>s and were likely a primary source of the original discrepancies. This iterative cleaning process
  not only resolved outstanding issues but also enabled a more precise reconciliation between
  <code>Orders_Final</code> and <code>Order_Items_Final</code>.
</p>

<p>
  With these recalculations, the newly created <code>Recalculated_Missing_Orders</code> and
  <code>Recalculated_Discrepant_Orders</code> tables now accurately reflect missing and discrepant <code>order_id</code>s, strengthening data integrity and providing a solid foundation for revenue analysis. These adjustments will ensure consistent calculations of total revenue and profitability across product categories, seller regions, and customer demographics.
</p>

<hr />

<h2>Recalculated_Discrepant_Orders Table</h2>
<p>
  To generate an updated list of <code>order_id</code>s with discrepancies between expected total payment values and
  calculated total order values, I created two temporary tables and joined them. Using
  <code>ROUND(SUM(...), 2)</code> alone would have helped to remove some small discrepancies, but others still would
  have appeared due to precision limitations. Including
  <code>AND ABS(c.calculated_order_value - p.total_payment_value) &gt;= 0.01</code> ensured that only
  <code>order_id</code>s with discrepancies of at least a penny were flagged, accounting for the precision limitations
  of the <code>ROUND</code> function.
</p>

<details class="section-details">
  <summary>üîç <b><i>Expand to View Details on the Creation of Recalculated_Discrepant_Orders</i></b></summary>
  <pre><code class="language-sql">
<!-- prettier-ignore -->
CREATE OR REPlACE TABLE iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Recalculated_Discrepant_Orders AS(
    WITH Calculated_Order_Values AS (
        SELECT 
            order_id,
            ROUND(SUM(price + freight_value),2) AS calculated_order_value
        FROM 
            iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Order_Items_Final
        GROUP BY 
            order_id
    ),
    Payments_Total AS (
        SELECT 
            order_id,
            ROUND(SUM(total_payment_value),3) AS total_payment_value
        FROM 
            iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Payments_Final
        GROUP BY 
            order_id
    )
    SELECT 
        c.order_id,
        c.calculated_order_value,
        p.total_payment_value,
        c.calculated_order_value - p.total_payment_value AS discrepancy
    FROM 
        Calculated_Order_Values AS c
    INNER JOIN 
        Payments_Total AS p
    ON 
        c.order_id = p.order_id
    WHERE 
        c.calculated_order_value != p.total_payment_value
        AND ABS(c.calculated_order_value - p.total_payment_value) &gt;= 0.01;
);
  </code></pre>
  <p>This query yielded <b>351 order_id</b>s.</p>
</details>

<hr />

<h2>Recalculated_Missing_Orders Table</h2>
<p>
  In addition to these discrepant <code>order_id</code>s, there are also several <code>order_id</code>s that appear in
  <code>Orders</code> but do not appear in <code>Order Items</code>. If left unaddressed, this would create discrepancies in analysis between <code>Orders_Final</code> and <code>Order_Items_Final</code>. During my initial data cleaning and analysis, I identified a list of these missing <code>order_id</code>s, primarily due to certain <code>order_id</code>s having a status of "unavailable" or "canceled," with a few others under different statuses.
</p>

<p>
  I downloaded this list as a .CSV file and imported it into Google BigQuery to filter <code>Orders_Final</code> and
  <code>Order_Items_Final</code> and ensure no missing <code>order_id</code>s remained. However, after an increase in verified <code>customer_id</code>s, I realized I needed to recalculate the missing orders to maintain data consistency.
</p>

<details class="section-details">
  <summary>üîç <b><i>Expand to View Details on the Creation of Recalculated_Missing_Orders</i></b></summary>
  <br />

  <h3>Step 1: Calculate Missing <code>order_id</code>s by Status</h3>
  <p>
    First, I needed to find out how many missing <code>order_id</code>s there were along with a breakdown per status.
  </p>

  <details class="code-details">
    <summary>üìÇ<b><i>Query to Find Missing <code>order_id</code>s by their status</i></b></summary>
    <pre><code class="language-sql">
<!-- prettier-ignore -->
WITH MissingOrderIDs AS (
    SELECT 
        o.order_status,
        COUNT(o.order_id) AS total_missing_order_ids
    FROM iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Orders_Final o
    LEFT JOIN iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Order_Items_Final oi ON o.order_id = oi.order_id
    WHERE oi.order_id IS NULL
    GROUP BY o.order_status
)
SELECT 
    order_status, 
    total_missing_order_ids
FROM 
    MissingOrderIDs

UNION ALL

SELECT
'Total' AS order_status, SUM(total_missing_order_ids) AS total_missing_order_ids
FROM
MissingOrderIDs;
</code></pre>

  </details>

  <h4>Supporting Table:</h4>
  <details class="code-details">
    <summary>üìã <b>Table 1: Missing <code>order_id</code>s by Status</b></summary>
    <img src="/assets/images/Table_1-missing_order_ids.png" alt="Table of order statuses and missing order_id counts" />
    <br />
    <p>- As you can see, there are <strong>733 total missing <code>order_id</code>s</strong> now, the majority of which contain the status <code>unavailable</code>.</p>
  </details>

  <h3>Step 2: Verify Total Missing <code>order_id</code>s</h3>
  <p>To confirm that this total was accurate, I compared the distinct <code>order_id</code> counts between <code>Orders_Final</code> and <code>Order_Items_Final</code>:</p>

  <details class="code-details">
    <summary>üìÇ<b><i>Query to Verify Number of Missing <code>order_id</code>s</i></b></summary>
    <pre><code class="language-sql">
<!-- prettier-ignore -->
SELECT
(SELECT COUNT(DISTINCT order_id) FROM iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Orders_Final) AS distinct_order_ids_orders,
(SELECT COUNT(DISTINCT order_id) FROM iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Order_Items_Final) AS distinct_order_ids_order_items;
    </code></pre>
  </details>
  
  <details class="code-details">
    <summary>üìã<b>Table 2: Distinct <code>order_id</code> Counts in <code>Orders_Final</code> and <code>Order_Items_Final</code></b></summary>
    <img src="/assets/images/Table_2-Distinct_order_id_counts_in_order_tables.png" alt="Table of distinct order_id counts in final tables" />
    <p>
      - Subtracting the two totals confirms the <strong>733</strong> number that was calculated before.
    </p>
  </details>

  <h3>Step 3: Created <code>Recalculated_Missing_Orders</code> Table</h3>
  <p>
    To isolate the actual missing <code>order_id</code>s, I created a table called <code>Recalculated_Missing_Orders</code>:
  </p>

  <details class="code-details">
    <summary>üìÇ<b><i>Query to Create <code>Recalculated_Missing_Orders</code></i></b></summary>
    <pre><code class="language-sql">
<!-- prettier-ignore -->
CREATE TABLE 
  iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Recalculated_Missing_Orders AS
SELECT 
  o.order_id, o.order_status
FROM 
  iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Orders_Final o
LEFT JOIN 
  iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Order_Items_Final oi 
ON 
  o.order_id = oi.order_id
WHERE 
  oi.order_id IS NULL;
    </code></pre>
  </details>

  <h3>Step 4: Verify Equal Distinct <code>order_id</code>s</h3>
  <p>
    After creating the final versions of <code>Orders_Final</code> and <code>Order_Items_Final</code>, I wanted to ensure
    that all missing or discrepant <code>order_id</code>s were properly excluded and that the number of distinct
    <code>order_id</code>s matched between the <code>Orders_Final</code> and <code>Order_Items_Final</code> tables.
  </p>

  <details class="code-details">
    <summary>üìÇ<b><i>Query to Verify Successful Removal of Missing <code>order_id</code>s</i></b></summary>
    <pre><code class="language-sql">
<!-- prettier-ignore -->
SELECT 
    (SELECT COUNT(DISTINCT order_id) FROM iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Orders_Final) AS distinct_order_ids_orders,
    (SELECT COUNT(DISTINCT order_id) FROM iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Order_Items_Final) AS distinct_order_ids_order_items;
    </code></pre>
  </details>

  <details class="code-details">
    <summary>üìã<b>Table 3: Equal Distinct <code>order_id</code> Counts between <code>Orders_Final</code> and <code>Order_Items_Final</code></b></summary>
    <img src="https://github.com/user-attachments/assets/04c9e3ae-2da2-4d38-bd3f-8121f5fc2453" alt="Table of distinct order_id counts between Orders_Final and Order_Items_Final" />
    <p>- When the query confirmed equal counts for both tables, I knew the cleaning steps had been effective.</p>
  </details>

  <p>
    _Note: One <code>order_id</code> was also missing in the <code>Payments_Final</code> table. The steps taken to identify
    and resolve this discrepancy are detailed in
    <a href="./Payments_Final/steps.md">Payments_Final steps.md</a>.
  </p>
</details>
:ET
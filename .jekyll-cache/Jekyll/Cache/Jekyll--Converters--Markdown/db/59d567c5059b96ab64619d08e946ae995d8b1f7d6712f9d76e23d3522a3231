I"È<h1 id="steps-to-create-orders_final">Steps to Create <code class="language-plaintext highlighter-rouge">Orders_Final</code></h1>

<h2 id="step-1-initial-orders_final-table-creation">Step 1: Initial <code class="language-plaintext highlighter-rouge">Orders_Final</code> Table Creation</h2>

<p>To accurately identify which orders were missing or discrepant, I needed tables that displayed <code class="language-plaintext highlighter-rouge">order_id</code>s based on the <code class="language-plaintext highlighter-rouge">Customers_Final</code> table created earlier.</p>

<details>
<summary>ðŸ“‚<b><i>Query to Create Initial Orders_Final&lt;/b&gt;</i>&lt;/summary&gt;
    
<pre><code class="language-sql">
CREATE OR REPLACE TABLE `iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Orders_Final` AS 
SELECT 
    orders.order_id,
    orders.customer_id,
    orders.order_status,
    orders.order_purchase_timestamp,
FROM 
    `iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Orders` AS orders
JOIN 
    `iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Customers_Final` AS cust
ON 
    orders.customer_id = cust.customer_id
</code></pre>
    
&lt;/details&gt;

- *This table just created is the one referenced in [Overview README.md](../README.md) for creating `Recalculated_Missing_Orders` and `Recalculated_Discrepant_Orders`. After creating those two tables, I referenced them in the following query in Step 2.*

## Step 2: Filtered Orders_Final Table with Missing and Discrepant Order IDs Removed

After identifying the discrepant and missing order_ids, I applied the necessary filter logic to create a complete, consistent Orders_Final table:

<details>
<summary>ðŸ“‚<b><i>Query to Create Filtered Orders_Final&lt;/b&gt;</i>&lt;/summary&gt;

<pre><code class="language-sql">
/* 
  This query was to create a new Orders_Final born of two issues found during initial cleaning and analysis.
    1. There are order_ids in the orders table that do not appear in the Order Items table. Those order_ids
  are marked in the Missing_Orders table.
    2. There are order_ids where the calculated revenue from price and freight do not match the total payment value
    These id's are marked in the Discrepant_Orders and Recalculated_Discrepant_orders tables. The first holds the order_ids 
    based on the initial analysis of 4 states rather than the current. The recalculated considers these new ids. 
*/

CREATE OR REPLACE TABLE `iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Orders_Final` AS 
SELECT 
    orders.order_id,
    orders.customer_id,
    orders.order_status,
    orders.order_purchase_timestamp,
FROM 
    `iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Orders` AS orders
JOIN 
    `iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Customers_Final` AS cust
ON 
    orders.customer_id = cust.customer_id
WHERE 
 
  orders.order_id NOT IN (
        SELECT 
          order_id 
        FROM 
          iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Recalculated_Missing_Orders
  )
  AND
  orders.order_id NOT IN (
        SELECT 
          order_id 
        FROM 
          iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Recalculated_Discrepant_Orders
  )
</code></pre>
    
&lt;/details&gt;

This approach ensured that `Orders_Final` was clean and aligned with both `Order_Items_Final` and `Payments_Final`, eliminating any `order_id`s that were missing or had revenue discrepancies.
</b></summary></details></b></summary></details>
:ET
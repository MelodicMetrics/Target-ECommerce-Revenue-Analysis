I"9<h1 id="steps-to-create-payments_final">Steps to Create <code class="language-plaintext highlighter-rouge">Payments_Final</code></h1>

<h3 id="step-1-initial-cleaning">Step 1: Initial Cleaning</h3>
<p>When I first started cleaning, I began by removing the <code class="language-plaintext highlighter-rouge">payment_sequential</code> column, which indicated instances where customers paid for their orders in multiple payments.
In order to group <code class="language-plaintext highlighter-rouge">order_id</code>s and eliminate duplicates, I summed all <code class="language-plaintext highlighter-rouge">payment_value</code> entries into a new column called <code class="language-plaintext highlighter-rouge">total_payment_value</code>.</p>
<ul>
  <li>This initial cleaning resulted in the <code class="language-plaintext highlighter-rouge">Payments_Cleaned</code> table, which contained <strong>101,836 entries</strong>.</li>
</ul>

<h3 id="step-2-iterative-cleaning">Step 2: Iterative Cleaning</h3>
<ol>
  <li><strong>Removed Duplicates from <code class="language-plaintext highlighter-rouge">payment_type</code></strong>:
    <ul>
      <li>I noticed that the <code class="language-plaintext highlighter-rouge">payment_type</code> column caused  duplicate entries because some <code class="language-plaintext highlighter-rouge">order_id</code>s were associated with multiple payment methods (e.g., <code class="language-plaintext highlighter-rouge">voucher</code> and <code class="language-plaintext highlighter-rouge">credit card</code>).</li>
      <li>To resolve this, I removed the <code class="language-plaintext highlighter-rouge">payment_type</code> column, eliminating these duplicates.</li>
    </ul>
  </li>
  <li><strong>Removed Duplicates from <code class="language-plaintext highlighter-rouge">payment_installments</code></strong>:
    <ul>
      <li>I also identified that the <code class="language-plaintext highlighter-rouge">payment_installments</code> column created duplicate entries due to <code class="language-plaintext highlighter-rouge">order_id</code>s split across multiple installments.</li>
      <li>Removing this column further reduced the duplicates in the table.</li>
    </ul>
  </li>
</ol>

<h3 id="step-3-filter-invalid-order_ids">Step 3: Filter Invalid <code class="language-plaintext highlighter-rouge">order_id</code>s</h3>

<ul>
  <li>To ensure only valid <code class="language-plaintext highlighter-rouge">order_id</code>s remained, I created <code class="language-plaintext highlighter-rouge">Payments_Final</code> by applying a <code class="language-plaintext highlighter-rouge">JOIN</code> between <code class="language-plaintext highlighter-rouge">Payments_Cleaned</code> and <code class="language-plaintext highlighter-rouge">Orders_Final</code>. This ensured that only <code class="language-plaintext highlighter-rouge">order_id</code>s present in <code class="language-plaintext highlighter-rouge">Orders_Final</code> appeared in <code class="language-plaintext highlighter-rouge">Payments_Final</code>.</li>
  <li>Additionally, I added the <code class="language-plaintext highlighter-rouge">GROUP BY</code> function to account for the removed columns <code class="language-plaintext highlighter-rouge">payment_installments</code> and <code class="language-plaintext highlighter-rouge">payment_type</code>, preventing duplicate <code class="language-plaintext highlighter-rouge">order_id</code>s that could impact future analysis.</li>
</ul>

<details>
<summary>üìÇ<b><i>Query to Create Payments_Final&lt;/b&gt;</i>&lt;/summary&gt;

```sql
/*
  In order to make sure the Payments table is in line with the new Orders_Final table
  I joined the two. This ensures only order_ids present in the Orders_Final table will
  appear in the Payments_Final.
  I also added the GROUP BY function to account for the removed columns payment_installments and payment_type. 
  Without using the function, I would have duplicate order_ids which could impact my analysis in 
  the future.
*/

CREATE OR REPLACE TABLE `iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Payments_Final` AS 
SELECT
    payments.order_id,
    SUM(payments.total_payment_value) AS total_payment_value
FROM 
    `iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Payments_Cleaned` AS payments
JOIN 
    `iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Orders_Final` AS orders
ON 
    payments.order_id = orders.order_id
GROUP BY
    payments.order_id
```
   
&lt;/details&gt;


- After applying these filters, the resulting `Payments_Final` table had **92,842 entries**, which was one fewer than expected as it should have matched `Orders_Final`.

### Step 4: Discover the Missing `order_id`
I discovered that a single `order_id` was missing from `Payments_Final` despite being present in `Orders_Final` and `Order_Items_Final` with valid `price` and `freight_value` data.

#### **Queries to Identify and Verify the Missing `order_id`:**

<details>
<summary>üìÇ<b><i>Query 1: Find missing order_id&lt;/b&gt;</i>&lt;/summary&gt;
   
```sql
SELECT 
    o.order_id 
FROM 
    iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Orders_Final AS o
LEFT JOIN 
    iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Payments_Final AS p
ON 
    o.order_id = p.order_id
WHERE 
    p.order_id IS NULL;
```
   
&lt;/details&gt;

<details>
<summary>üìÇ<b><i>Query 2: Find price and freight of missing id in Order_Items_Final&lt;/b&gt;</i>&lt;/summary&gt;
   
```sql
SELECT
  order_id,
  price,
  freight_value
FROM
  iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Order_Items_Final
WHERE
  order_id = "bfbd0f9bdef84302105ad712db648a6c"
```
   
&lt;/details&gt;


**Supporting Tables**:

<details>
<summary>üìã<b>Table 1: Missing order_id in Payments_Final</b></summary>

![Table of missing `order_id` from `Payments_Final`](https://github.com/user-attachments/assets/ab457029-5bd2-40b1-a91d-26be8766c6d5)
   
</details>

<details>
<summary>üìã<b>Table 2: Missing order_id Found in Order_Items_Final</b></summary>

![Table of missing `order_id` found in `Order_Items_Final`](https://github.com/user-attachments/assets/6b3912a8-4fff-43f8-a54b-ef22e0e10efe)
   
</details>


### Step 5: Resolving the Missing `order_id`

With the missing `order_id` and its accompanying `price` and `freight_values` I could now resolve the issue in `Payments_Final`.
- In order to do so, I calculated the `total_payment_value`(column in `Payments_Final`) by summing the `price` and `freight_value` of the products associated with the missing `order_id` and inserted it into `Payments_Final`.

<details>
<summary>üìÅ<b><i>Query to Insert Missing id into Payments_Final&lt;/b&gt;</i>&lt;/summary&gt;
   
```sql
-- Insert the calculated total_payment_value for the missing order_id directly into Payments_Final
INSERT INTO iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Payments_Final (order_id, total_payment_value)
SELECT 
    order_id,
    ROUND(SUM(price + freight_value), 3) AS total_payment_value
FROM 
    iconic-fountain-435918-q3.Target_Ecommerce_Sales_2016_2018.Order_Items_Final
WHERE 
    order_id = 'bfbd0f9bdef84302105ad712db648a6c'
GROUP BY 
    order_id;
```
   
&lt;/details&gt;

- After reinserting this `order_id`, the table returned the expected total of **92,843 entries**, perfectly matching `Orders_Final`.

---

</b></summary></details></b></summary></details></b></summary></details></b></summary></details>
:ET